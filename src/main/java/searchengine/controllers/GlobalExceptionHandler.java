package searchengine.controllers;

import lombok.extern.slf4j.Slf4j;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import searchengine.dto.statistics.ErrorResponse;
import searchengine.exceptions.IndexNotReadyException;
import searchengine.exceptions.IndexingAlreadyRunningException;

import javax.swing.text.html.parser.Entity;

@Slf4j
@ControllerAdvice
public class GlobalExceptionHandler {

    // üîπ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –Ω–µ –≥–æ—Ç–æ–≤–∞
    @ExceptionHandler(IndexNotReadyException.class)
    public ResponseEntity<ErrorResponse> handleIndexNotReady(IndexNotReadyException ex) {
        log.warn("–û—à–∏–±–∫–∞: {}", ex.getMessage());
        return ResponseEntity
                .badRequest()
                .body(new ErrorResponse(false, ex.getMessage()));
    }

    // üîπ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞
    @ExceptionHandler(IndexingAlreadyRunningException.class)
    public ResponseEntity<ErrorResponse> handleIndexingAlreadyRunning(IndexingAlreadyRunningException ex) {
        log.warn("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å —É–∂–µ –∞–∫—Ç–∏–≤–Ω—É—é –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é: {}", ex.getMessage());
        return ResponseEntity
                .status(HttpStatus.CONFLICT)
                .body(new ErrorResponse(false, ex.getMessage()));
    }

    // üîπ –û—à–∏–±–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∑–∞–ø–∏—Å–µ–π)
    @ExceptionHandler(DataIntegrityViolationException.class)
    public ResponseEntity<ErrorResponse> handleDataIntegrity(DataIntegrityViolationException ex) {
        log.error("–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {}", ex.getMessage());
        return ResponseEntity
                .badRequest()
                .body(new ErrorResponse(false, ex.getMessage()));
    }


    // üîπ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ–≤–µ—Ä–Ω—ã–π URL)
    @ExceptionHandler(IllegalArgumentException.class)
    public ResponseEntity<ErrorResponse> handleIllegalArgument(IllegalArgumentException ex) {
        log.warn("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç: {}", ex.getMessage());
        return ResponseEntity
                .badRequest()
                .body(new ErrorResponse(false, ex.getMessage()));
    }

    // üîπ –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
    @ExceptionHandler(Exception.class)
    public ResponseEntity<ErrorResponse> handleGeneral(Exception ex) {
        log.error("–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {}", ex.getMessage(), ex);
        return ResponseEntity
                .status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(new ErrorResponse(false, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞."));
    }

}
